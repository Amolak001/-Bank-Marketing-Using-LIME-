# -*- coding: utf-8 -*-
"""Bank Marketing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uDK1XnNNpV4BBa9qJs94afQu2Hq4bF27
"""

from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

bank_data=pd.read_csv('/content/drive/MyDrive/bank-additional-full.csv',sep=';')

bank_data.head()

# prompt: change the column y element yes=1 and no=0 with map

bank_data['y'] = bank_data['y'].map({'yes':1,'no':0})

bank_data_encoded=pd.get_dummies(bank_data,drop_first=True)
bank_data_encoded.head()

x=bank_data_encoded.drop('y',axis=1)
y=bank_data_encoded['y']

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model=RandomForestClassifier(random_state=42)
model.fit(X_train,y_train)

y_pred=model.predict(X_test)
print(classification_report(y_test,y_pred))
print(accuracy_score(y_test,y_pred))

importances = model.feature_importances_
feature_names = x.columns
sorted_indices = np.argsort(importances)[::-1]

plt.figure(figsize=(10, 6))
plt.title("Global Feature Importance")
plt.bar(range(x.shape[1]), importances[sorted_indices], align="center")
plt.xticks(range(x.shape[1]), feature_names[sorted_indices], rotation=90)
plt.tight_layout()
plt.show()

!pip install lime
from lime.lime_tabular import LimeTabularExplainer

feature_names = x.columns
explainer = LimeTabularExplainer(X_train.values,training_labels=y_train.values, feature_names=feature_names,class_names=["no","yes"], mode='classification')

obs_4 = X_test.iloc[3].values
obs_20 = X_test.iloc[19].values

exp_4 = explainer.explain_instance(obs_4, model.predict_proba, num_features=10)
exp_20 = explainer.explain_instance(obs_20, model.predict_proba, num_features=10)

print("Explanation for Observation #4")
exp_4.show_in_notebook()
exp_4.as_pyplot_figure()
plt.show()

print("Explanation for Observation #20")
exp_20.show_in_notebook()
exp_20.as_pyplot_figure()
plt.show()